/*
 * Do not modify this file directly.
 * This file was generated by: playwright.generate-tests.ts.
 * Regenerate using: npm run test:visual:generate
 */
import {test, expect} from '@playwright/test'

// eslint-disable-next-line i18n-text/no-en
test.describe('Visual Comparison: BreakoutBanner', () => {
  test('BreakoutBanner / Default', async ({page}) => {
    await page.goto('http://localhost:6006/iframe.html?args=&id=components-breakoutbanner--default&viewMode=story')

    await page.waitForTimeout(500)
    await expect(page).toHaveScreenshot({fullPage: true})
  })

  test('BreakoutBanner / Default (fr)', async ({page}) => {
    await page.goto(
      'http://localhost:6006/iframe.html?globals=locale%3Afr&args=&id=components-breakoutbanner--default&viewMode=story',
    )

    await page.waitForTimeout(500)
    await expect(page).toHaveScreenshot({fullPage: true})
  })

  test('BreakoutBanner / Default (de)', async ({page}) => {
    await page.goto(
      'http://localhost:6006/iframe.html?globals=locale%3Ade&args=&id=components-breakoutbanner--default&viewMode=story',
    )

    await page.waitForTimeout(500)
    await expect(page).toHaveScreenshot({fullPage: true})
  })

  test('BreakoutBanner / Default (ja)', async ({page}) => {
    await page.goto(
      'http://localhost:6006/iframe.html?globals=locale%3Aja&args=&id=components-breakoutbanner--default&viewMode=story',
    )

    await page.waitForTimeout(500)
    await expect(page).toHaveScreenshot({fullPage: true})
  })

  test('BreakoutBanner / Default (es)', async ({page}) => {
    await page.goto(
      'http://localhost:6006/iframe.html?globals=locale%3Aes&args=&id=components-breakoutbanner--default&viewMode=story',
    )

    await page.waitForTimeout(500)
    await expect(page).toHaveScreenshot({fullPage: true})
  })

  test('BreakoutBanner / Default (pt-BR)', async ({page}) => {
    await page.goto(
      'http://localhost:6006/iframe.html?globals=locale%3Apt-BR&args=&id=components-breakoutbanner--default&viewMode=story',
    )

    await page.waitForTimeout(500)
    await expect(page).toHaveScreenshot({fullPage: true})
  })

  test('BreakoutBanner / Playground', async ({page}) => {
    await page.goto('http://localhost:6006/iframe.html?args=&id=components-breakoutbanner--playground&viewMode=story')

    await page.waitForTimeout(500)
    await expect(page).toHaveScreenshot({fullPage: true})
  })

  test('BreakoutBanner / Playground (fr)', async ({page}) => {
    await page.goto(
      'http://localhost:6006/iframe.html?globals=locale%3Afr&args=&id=components-breakoutbanner--playground&viewMode=story',
    )

    await page.waitForTimeout(500)
    await expect(page).toHaveScreenshot({fullPage: true})
  })

  test('BreakoutBanner / Playground (de)', async ({page}) => {
    await page.goto(
      'http://localhost:6006/iframe.html?globals=locale%3Ade&args=&id=components-breakoutbanner--playground&viewMode=story',
    )

    await page.waitForTimeout(500)
    await expect(page).toHaveScreenshot({fullPage: true})
  })

  test('BreakoutBanner / Playground (ja)', async ({page}) => {
    await page.goto(
      'http://localhost:6006/iframe.html?globals=locale%3Aja&args=&id=components-breakoutbanner--playground&viewMode=story',
    )

    await page.waitForTimeout(500)
    await expect(page).toHaveScreenshot({fullPage: true})
  })

  test('BreakoutBanner / Playground (es)', async ({page}) => {
    await page.goto(
      'http://localhost:6006/iframe.html?globals=locale%3Aes&args=&id=components-breakoutbanner--playground&viewMode=story',
    )

    await page.waitForTimeout(500)
    await expect(page).toHaveScreenshot({fullPage: true})
  })

  test('BreakoutBanner / Playground (pt-BR)', async ({page}) => {
    await page.goto(
      'http://localhost:6006/iframe.html?globals=locale%3Apt-BR&args=&id=components-breakoutbanner--playground&viewMode=story',
    )

    await page.waitForTimeout(500)
    await expect(page).toHaveScreenshot({fullPage: true})
  })

  test('BreakoutBanner / Custom Background Colors', async ({page}) => {
    await page.goto(
      'http://localhost:6006/iframe.html?args=&id=components-breakoutbanner-features--custom-background-colors&viewMode=story',
    )

    await page.waitForTimeout(500)
    await expect(page).toHaveScreenshot({fullPage: true})
  })

  test('BreakoutBanner / Custom Background Colors (fr)', async ({page}) => {
    await page.goto(
      'http://localhost:6006/iframe.html?globals=locale%3Afr&args=&id=components-breakoutbanner-features--custom-background-colors&viewMode=story',
    )

    await page.waitForTimeout(500)
    await expect(page).toHaveScreenshot({fullPage: true})
  })

  test('BreakoutBanner / Custom Background Colors (de)', async ({page}) => {
    await page.goto(
      'http://localhost:6006/iframe.html?globals=locale%3Ade&args=&id=components-breakoutbanner-features--custom-background-colors&viewMode=story',
    )

    await page.waitForTimeout(500)
    await expect(page).toHaveScreenshot({fullPage: true})
  })

  test('BreakoutBanner / Custom Background Colors (ja)', async ({page}) => {
    await page.goto(
      'http://localhost:6006/iframe.html?globals=locale%3Aja&args=&id=components-breakoutbanner-features--custom-background-colors&viewMode=story',
    )

    await page.waitForTimeout(500)
    await expect(page).toHaveScreenshot({fullPage: true})
  })

  test('BreakoutBanner / Custom Background Colors (es)', async ({page}) => {
    await page.goto(
      'http://localhost:6006/iframe.html?globals=locale%3Aes&args=&id=components-breakoutbanner-features--custom-background-colors&viewMode=story',
    )

    await page.waitForTimeout(500)
    await expect(page).toHaveScreenshot({fullPage: true})
  })

  test('BreakoutBanner / Custom Background Colors (pt-BR)', async ({page}) => {
    await page.goto(
      'http://localhost:6006/iframe.html?globals=locale%3Apt-BR&args=&id=components-breakoutbanner-features--custom-background-colors&viewMode=story',
    )

    await page.waitForTimeout(500)
    await expect(page).toHaveScreenshot({fullPage: true})
  })

  test('BreakoutBanner / Responsive Background Image', async ({page}) => {
    await page.goto(
      'http://localhost:6006/iframe.html?args=&id=components-breakoutbanner-features--responsive-background-image&viewMode=story',
    )

    await page.waitForTimeout(500)
    await expect(page).toHaveScreenshot({fullPage: true})
  })

  test('BreakoutBanner / Responsive Background Image (fr)', async ({page}) => {
    await page.goto(
      'http://localhost:6006/iframe.html?globals=locale%3Afr&args=&id=components-breakoutbanner-features--responsive-background-image&viewMode=story',
    )

    await page.waitForTimeout(500)
    await expect(page).toHaveScreenshot({fullPage: true})
  })

  test('BreakoutBanner / Responsive Background Image (de)', async ({page}) => {
    await page.goto(
      'http://localhost:6006/iframe.html?globals=locale%3Ade&args=&id=components-breakoutbanner-features--responsive-background-image&viewMode=story',
    )

    await page.waitForTimeout(500)
    await expect(page).toHaveScreenshot({fullPage: true})
  })

  test('BreakoutBanner / Responsive Background Image (ja)', async ({page}) => {
    await page.goto(
      'http://localhost:6006/iframe.html?globals=locale%3Aja&args=&id=components-breakoutbanner-features--responsive-background-image&viewMode=story',
    )

    await page.waitForTimeout(500)
    await expect(page).toHaveScreenshot({fullPage: true})
  })

  test('BreakoutBanner / Responsive Background Image (es)', async ({page}) => {
    await page.goto(
      'http://localhost:6006/iframe.html?globals=locale%3Aes&args=&id=components-breakoutbanner-features--responsive-background-image&viewMode=story',
    )

    await page.waitForTimeout(500)
    await expect(page).toHaveScreenshot({fullPage: true})
  })

  test('BreakoutBanner / Responsive Background Image (pt-BR)', async ({page}) => {
    await page.goto(
      'http://localhost:6006/iframe.html?globals=locale%3Apt-BR&args=&id=components-breakoutbanner-features--responsive-background-image&viewMode=story',
    )

    await page.waitForTimeout(500)
    await expect(page).toHaveScreenshot({fullPage: true})
  })

  test('BreakoutBanner / Responsive Background Image Dark', async ({page}) => {
    await page.goto(
      'http://localhost:6006/iframe.html?args=&id=components-breakoutbanner-features--responsive-background-image-dark&viewMode=story',
    )

    await page.waitForTimeout(500)
    await expect(page).toHaveScreenshot({fullPage: true})
  })

  test('BreakoutBanner / Responsive Background Image Dark (fr)', async ({page}) => {
    await page.goto(
      'http://localhost:6006/iframe.html?globals=locale%3Afr&args=&id=components-breakoutbanner-features--responsive-background-image-dark&viewMode=story',
    )

    await page.waitForTimeout(500)
    await expect(page).toHaveScreenshot({fullPage: true})
  })

  test('BreakoutBanner / Responsive Background Image Dark (de)', async ({page}) => {
    await page.goto(
      'http://localhost:6006/iframe.html?globals=locale%3Ade&args=&id=components-breakoutbanner-features--responsive-background-image-dark&viewMode=story',
    )

    await page.waitForTimeout(500)
    await expect(page).toHaveScreenshot({fullPage: true})
  })

  test('BreakoutBanner / Responsive Background Image Dark (ja)', async ({page}) => {
    await page.goto(
      'http://localhost:6006/iframe.html?globals=locale%3Aja&args=&id=components-breakoutbanner-features--responsive-background-image-dark&viewMode=story',
    )

    await page.waitForTimeout(500)
    await expect(page).toHaveScreenshot({fullPage: true})
  })

  test('BreakoutBanner / Responsive Background Image Dark (es)', async ({page}) => {
    await page.goto(
      'http://localhost:6006/iframe.html?globals=locale%3Aes&args=&id=components-breakoutbanner-features--responsive-background-image-dark&viewMode=story',
    )

    await page.waitForTimeout(500)
    await expect(page).toHaveScreenshot({fullPage: true})
  })

  test('BreakoutBanner / Responsive Background Image Dark (pt-BR)', async ({page}) => {
    await page.goto(
      'http://localhost:6006/iframe.html?globals=locale%3Apt-BR&args=&id=components-breakoutbanner-features--responsive-background-image-dark&viewMode=story',
    )

    await page.waitForTimeout(500)
    await expect(page).toHaveScreenshot({fullPage: true})
  })

  test('BreakoutBanner / Aligned Center', async ({page}) => {
    await page.goto(
      'http://localhost:6006/iframe.html?args=&id=components-breakoutbanner-features--aligned-center&viewMode=story',
    )

    await page.waitForTimeout(500)
    await expect(page).toHaveScreenshot({fullPage: true})
  })

  test('BreakoutBanner / Aligned Center (fr)', async ({page}) => {
    await page.goto(
      'http://localhost:6006/iframe.html?globals=locale%3Afr&args=&id=components-breakoutbanner-features--aligned-center&viewMode=story',
    )

    await page.waitForTimeout(500)
    await expect(page).toHaveScreenshot({fullPage: true})
  })

  test('BreakoutBanner / Aligned Center (de)', async ({page}) => {
    await page.goto(
      'http://localhost:6006/iframe.html?globals=locale%3Ade&args=&id=components-breakoutbanner-features--aligned-center&viewMode=story',
    )

    await page.waitForTimeout(500)
    await expect(page).toHaveScreenshot({fullPage: true})
  })

  test('BreakoutBanner / Aligned Center (ja)', async ({page}) => {
    await page.goto(
      'http://localhost:6006/iframe.html?globals=locale%3Aja&args=&id=components-breakoutbanner-features--aligned-center&viewMode=story',
    )

    await page.waitForTimeout(500)
    await expect(page).toHaveScreenshot({fullPage: true})
  })

  test('BreakoutBanner / Aligned Center (es)', async ({page}) => {
    await page.goto(
      'http://localhost:6006/iframe.html?globals=locale%3Aes&args=&id=components-breakoutbanner-features--aligned-center&viewMode=story',
    )

    await page.waitForTimeout(500)
    await expect(page).toHaveScreenshot({fullPage: true})
  })

  test('BreakoutBanner / Aligned Center (pt-BR)', async ({page}) => {
    await page.goto(
      'http://localhost:6006/iframe.html?globals=locale%3Apt-BR&args=&id=components-breakoutbanner-features--aligned-center&viewMode=story',
    )

    await page.waitForTimeout(500)
    await expect(page).toHaveScreenshot({fullPage: true})
  })

  test('BreakoutBanner / Optional Description', async ({page}) => {
    await page.goto(
      'http://localhost:6006/iframe.html?args=&id=components-breakoutbanner-features--optional-description&viewMode=story',
    )

    await page.waitForTimeout(500)
    await expect(page).toHaveScreenshot({fullPage: true})
  })

  test('BreakoutBanner / Optional Description (fr)', async ({page}) => {
    await page.goto(
      'http://localhost:6006/iframe.html?globals=locale%3Afr&args=&id=components-breakoutbanner-features--optional-description&viewMode=story',
    )

    await page.waitForTimeout(500)
    await expect(page).toHaveScreenshot({fullPage: true})
  })

  test('BreakoutBanner / Optional Description (de)', async ({page}) => {
    await page.goto(
      'http://localhost:6006/iframe.html?globals=locale%3Ade&args=&id=components-breakoutbanner-features--optional-description&viewMode=story',
    )

    await page.waitForTimeout(500)
    await expect(page).toHaveScreenshot({fullPage: true})
  })

  test('BreakoutBanner / Optional Description (ja)', async ({page}) => {
    await page.goto(
      'http://localhost:6006/iframe.html?globals=locale%3Aja&args=&id=components-breakoutbanner-features--optional-description&viewMode=story',
    )

    await page.waitForTimeout(500)
    await expect(page).toHaveScreenshot({fullPage: true})
  })

  test('BreakoutBanner / Optional Description (es)', async ({page}) => {
    await page.goto(
      'http://localhost:6006/iframe.html?globals=locale%3Aes&args=&id=components-breakoutbanner-features--optional-description&viewMode=story',
    )

    await page.waitForTimeout(500)
    await expect(page).toHaveScreenshot({fullPage: true})
  })

  test('BreakoutBanner / Optional Description (pt-BR)', async ({page}) => {
    await page.goto(
      'http://localhost:6006/iframe.html?globals=locale%3Apt-BR&args=&id=components-breakoutbanner-features--optional-description&viewMode=story',
    )

    await page.waitForTimeout(500)
    await expect(page).toHaveScreenshot({fullPage: true})
  })

  test('BreakoutBanner / Vertically Stacked Links', async ({page}) => {
    await page.goto(
      'http://localhost:6006/iframe.html?args=&id=components-breakoutbanner-features--vertically-stacked-links&viewMode=story',
    )

    await page.waitForTimeout(500)
    await expect(page).toHaveScreenshot({fullPage: true})
  })

  test('BreakoutBanner / Vertically Stacked Links (fr)', async ({page}) => {
    await page.goto(
      'http://localhost:6006/iframe.html?globals=locale%3Afr&args=&id=components-breakoutbanner-features--vertically-stacked-links&viewMode=story',
    )

    await page.waitForTimeout(500)
    await expect(page).toHaveScreenshot({fullPage: true})
  })

  test('BreakoutBanner / Vertically Stacked Links (de)', async ({page}) => {
    await page.goto(
      'http://localhost:6006/iframe.html?globals=locale%3Ade&args=&id=components-breakoutbanner-features--vertically-stacked-links&viewMode=story',
    )

    await page.waitForTimeout(500)
    await expect(page).toHaveScreenshot({fullPage: true})
  })

  test('BreakoutBanner / Vertically Stacked Links (ja)', async ({page}) => {
    await page.goto(
      'http://localhost:6006/iframe.html?globals=locale%3Aja&args=&id=components-breakoutbanner-features--vertically-stacked-links&viewMode=story',
    )

    await page.waitForTimeout(500)
    await expect(page).toHaveScreenshot({fullPage: true})
  })

  test('BreakoutBanner / Vertically Stacked Links (es)', async ({page}) => {
    await page.goto(
      'http://localhost:6006/iframe.html?globals=locale%3Aes&args=&id=components-breakoutbanner-features--vertically-stacked-links&viewMode=story',
    )

    await page.waitForTimeout(500)
    await expect(page).toHaveScreenshot({fullPage: true})
  })

  test('BreakoutBanner / Vertically Stacked Links (pt-BR)', async ({page}) => {
    await page.goto(
      'http://localhost:6006/iframe.html?globals=locale%3Apt-BR&args=&id=components-breakoutbanner-features--vertically-stacked-links&viewMode=story',
    )

    await page.waitForTimeout(500)
    await expect(page).toHaveScreenshot({fullPage: true})
  })
})
